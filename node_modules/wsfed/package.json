{
  "name": "wsfed",
  "version": "0.3.0",
  "description": "WSFed server middleware",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/auth0/node-wsfed.git"
  },
  "keywords": [
    "wsfed",
    "saml",
    "auth"
  ],
  "author": {
    "name": "Auth0"
  },
  "license": "mit",
  "dependencies": {
    "saml": "~0.2.5",
    "ejs": "~0.8.3",
    "thumbprint": "0.0.1"
  },
  "devDependencies": {
    "chai": "~1.5.0",
    "express": "~3.1.0",
    "mocha": "~1.8.1",
    "request": "~2.14.0",
    "xmldom": "~0.1.13",
    "cheerio": "~0.10.7",
    "xml-crypto": "0.0.10",
    "xpath": "0.0.5",
    "xtend": "~2.0.3"
  },
  "readme": "WS Federation middleware for node.js.\n\n[![Build Status](https://travis-ci.org/auth0/node-wsfed.png)](https://travis-ci.org/auth0/node-wsfed)\n\n## Installation\n\n    npm install wsfed\n\n## Introduction\n\nThis middleware is meant to generate a valid WSFederation endpoint that talks saml.\n\nThe idea is that you will use another mechanism to valida the user first.\n\nThe endpoint supports metadata as well in the url ```/FederationMetadata/2007-06/FederationMetadata.xml```.\n\n## Usage\n\nOptions\n\n| Name                | Description                                      | Default                                      |\n| --------------------|:-------------------------------------------------| ---------------------------------------------|\n| cert                | public key used by this identity provider        | REQUIRED                                     |\n| key                 | private key used by this identity provider       | REQUIRED                                     |\n| getPostURL          | get the url to post the token f(wtrealm, wreply, req, callback)                | REQUIRED                                     |\n| issuer              | the name of the issuer of the token              | REQUIRED                                     |\n| audience            | the audience for the saml token                  | req.query.wtrealm || req.query.wreply        |\n| getUserFromRequest  | how to extract the user information from request | function(req) { return req.user; }           |\n| profileMapper       | mapper to map users to claims (see PassportProfileMapper)| PassportProfileMapper |\n| signatureAlgorithm  | signature algorithm, options: rsa-sha1, rsa-sha256 | ```'rsa-sha256'``` |\n| digestAlgorithm     | digest algorithm, options: sha1, sha256          | ```'sha256'``` |\n| wctx                | state of the auth process                        | ```req.query.wctx``` |\n\n\nAdd the middleware as follows:\n\n~~~javascript\napp.get('/wsfed', wsfed.auth({\n  issuer:     'the-issuer',\n  cert:       fs.readFileSync(path.join(__dirname, 'some-cert.pem')),\n  key:        fs.readFileSync(path.join(__dirname, 'some-cert.key')),\n  getPostUrl: function (wtrealm, wreply, req, callback) { \n                return cb( null, 'http://someurl.com')\n              }\n}));\n~~~~\n\n## WsFederation Metadata\n\nwsfed can generate the metadata document for wsfederation as well. Usage as follows:\n\n~~~javascript\napp.get('/wsfed/FederationMetadata/2007-06/FederationMetadata.xml', wsfed.metadata({\n  issuer:   'the-issuer',\n  cert:     fs.readFileSync(path.join(__dirname, 'some-cert.pem')),\n}));\n~~~\n\nIt also accept two optionals parameters:\n\n-  profileMapper: a class implementing the profile mapper. This is used to render the claims type information (using the metadata property). See [PassportProfileMapper](https://github.com/auth0/node-wsfed/blob/master/lib/claims/PassportProfileMapper.js) for more information.\n-  endpointPath: this is the full path in your server to the auth route. By default the metadata handler uses the metadata request route without ```/FederationMetadata/2007..blabla.```\n\n## WsFederation Metadata endpoints ADFS1-like\n\nADFS v1 uses another set of endpoints for the metadata and the thumbprint. If you have to connect an ADFS v1 client you have to do something like this:\n\n~~~javascript\napp.get('/wsfed/adfs/fs/federationserverservice.asmx',\n    wsfed.federationServerService.wsdl);\n\napp.post('/wsfed/adfs/fs/federationserverservice.asmx',\n    wsfed.federationServerService.thumbprint({\n      pkcs7: yourPkcs7,\n      cert:  yourCert\n    }));\n~~~\n\nnotice that you need a ```pkcs7``` with the full chain of all certificates. You can generate this with openssl as follows:\n\n~~~bash\nopenssl crl2pkcs7 -nocrl \\\n    -certfile your.crt \\\n    -certfile another-cert-in-the-chain.crt \\\n    -out contoso1.p7b\n~~~ \n\n## License\n\nMIT - AUTH0 2013!",
  "readmeFilename": "README.md",
  "_id": "wsfed@0.3.0",
  "dist": {
    "shasum": "db7760c6f1c62d43f128f1832a834674639a6a05"
  },
  "_from": "wsfed@",
  "_resolved": "https://registry.npmjs.org/wsfed/-/wsfed-0.3.0.tgz"
}
